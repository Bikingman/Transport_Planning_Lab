
# Global ----

library(shiny)
library(leaflet)
library(sp)
library(tmap)
library(data.table)
tmap_mode("view")

setwd("C:\\Users\\Daniel I. Patterson\\Desktop\\Shiney\\shiny_bike_share_app\\data")

data <- read.csv("201804-citibike-tripdata.csv", sep=',', header=T)

#write in number of hires 
data$hire <- 1

#Hire day
#note, don't put c() around formating when dealing with one format type. Otherwise
#you'll end up with NAs ever other row. 
data$day <- as.POSIXlt(data$starttime, format = "%Y-%m-%d %H:%M:%S", tz = "EST")$mday

#hour of day
data$hour <- as.POSIXlt(data$starttime, format = "%Y-%m-%d %H:%M:%S", tz = "EST")$hour

#day of week
data$weekday <- as.POSIXlt(data$starttime, format = "%Y-%m-%d %H:%M:%S", tz = "EST")$wday

#extract weekdays
data <- subset(data, weekday > 0 & weekday < 7)

#is morning
data$morning <- ifelse(data$hour >= 6 | data$hour >= 9, 1, 0)

#is evening
data$evening <- ifelse(data$hour >= 15 | data$hour <= 18, 1, 0)

#get morning data
morning <- subset(data, morning == 1)

#get evening data
evening <- subset(data, evening == 1)

#aggregate by location 
morning_hires <- aggregate(hire ~ start.station.id + start.station.latitude + start.station.longitude, data = morning, FUN = sum)

morning_hires <- morning_hires[order(-morning_hires$hire),] 
#get unique id names to merge with morning hires
ids <- unique(subset(data, select = c(start.station.id, start.station.name)))
morning_hires2 <- merge(morning_hires, ids, by = "start.station.id", all.x = T, all.y = F)

distribution_list <- morning_hires2[1:40,]
distribution_list$perc <- distribution_list$hire/sum(distribution_list$hire)
distribution_list$bike_count <- round(distribution_list$perc*100,0)
distribution_list <- subset(distribution_list, bike_count > 0)
distribution_list <- distribution_list[order(-distribution_list$bike_count),] 

final_list <- subset(distribution_list, select = c("start.station.name", "bike_count"))

pts <- morning_hires[,c(2:1)]
morning_spatial <- SpatialPointsDataFrame(pts, data = morning_hires,   
                                          proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))

pts1 <- distribution_list[,c(2:1)]
distribution_spatial <- SpatialPointsDataFrame(pts1, data = distribution_list,
                                               proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))

setwd("C:\\Users\\Daniel I. Patterson\\Desktop\\Shiney\\shiny_bike_share_app")











# Define UI ----
ui <- fluidPage(
  
  # Application title
  titlePanel("Bike Expansion Tool"),
  
  # Sidebar with a slider input for the number of bins
  sidebarLayout(
    sidebarPanel(
      h2(strong("Parameters")),
      br(), 
      br(),
      fluidRow(
        column(12,
               radioButtons("city", 
                            h4("Where are we expanding?"),
                            choices = list(
                              "New York City"  = "NYC",
                              "Boston" = "Boston",
                              "Philadelphia" = "Philadelphia",
                              "Minneapolis" = "Minneapolis",
                              "San Francisco" = "San Francisco",
                              "Columbus" = "Columbus"),
                            selected = "NYC")
        )
      ),
      fluidRow(
        column(12,
               radioButtons("radio", 
                            h4("Will the distribution take place in the day or overnight?"),
                            choices = list(
                              "Day"  = 6,
                              "Night" = 10),
                            selected = 6),
               helpText("This will determine how much time there is to deliver the bikes.")
                            )
        ),
       fluidRow(
        column(12,
               numericInput("addbikes", 
                            h4("How many bikes are we adding?"), 
                            value =100)
               )
        ),
      fluidRow(
        column(12,
               numericInput("vans", 
                            h4("How many van will be available to distribute new bikes?"), 
                            value = 4),
               helpText("Please only include vans that will be available for distributing", em("new"), "bikes during the shift.")
        )
      ),
      fluidRow(
        column(12,
               numericInput("stations", 
                            h4("How many stations will get new bikes?"), 
                            value = 40)
        )
      ),
        fluidRow(
          column(12,
                 img(src = "spots.png", height = 100, width = 100, position = "bottom"),
                 p("This tool was developed by Daniel Patterson, more of his work can be found on", a(href = "http://www.urbandatacyclist.com", "his webpage."),
                   p("Thanks for checking in!")
                 )
          )
        )
    ),
       
    mainPanel(
      h2(strong("Expansion Plan")),
      br(),
      strong(textOutput("Statement")),
      br(),
      textOutput("Statement2"),
      br(),
      
      fluidRow(
        column(12, downloadButton("downloadDataFromTable", "Download Table Data"))
      ),
      
      fluidRow(
        column(12,
               dataTableOutput("table"
               )
        )
      ),
      
      br(),
      br(),
      p("This list includes the most popular stations and calculates how many bikes should be added to each station given thier relative popularity in the past month."),
      br(),
      br(),
      fluidRow(
        column(12,
               leafletOutput("map"
               )
        )
      ),
      br(),
      br(),
      p("This map will help planning the expansion. You can see on the map how many bikes are assigned to each station."),
      br(),
      p("If during the expansion there arn't enough spaces for additional bikes, continue with the expansion and dispurse the bikes as you would if they were part of the daily grind.",
        em("Keep up the good work!")
        )
  )
)
)

  
  
  
# Define server logic ----
server <- function(input, output) {
  
  output$Statement <- renderText({
    A <- input$stations
    B <- as.numeric(input$radio)
    C <- input$vans
    D <- input$addbikes
    E <- ceiling(A/B)
    F <- ceiling(E/C)
    G <- ceiling(D/B)
    paste("During this shift, each van will be expected to reach approximatily,", F,"stations and deliver", G, "bikes per hour. Is this managable?")
  })
  
  
  
  output$Statement2 <- renderText({
    paste("If you think the team can handle this, then here's the plan!")
  })
  
  
  
  output$table <- renderDataTable({
    #get precentage
    
    

#THis is where I am at the moment. 
#Objective, need table to update dynamically. 
#Problem, table returns undefined columns selected
#Problem, when snipit of code that generations final_list from morning_hires is inlcuded at this stage, the code returns undefined columns
#Hypothesis, input$addbikes and input$stations isn't working correctly
#May need to look into switch option
    
    
    total_stations <- input$stations
    total_bikes <- input$addbikes
    
 
    
    final_list[,c(2,3)]
  })

  
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles(providers$Stamen.TonerLite,
                       options = providerTileOptions(noWrap = TRUE)
      ) %>%
      addCircleMarkers(data = distribution_spatial, 
                       label = as.character(distribution_spatial$bike_count)
                       )
  })
  }

# Run the app ----
shinyApp(ui = ui, server = server)




